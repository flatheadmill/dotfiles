filetype off            " reset filetype detection for pathgen to work correctly
"call pathogen#runtime_append_all_bundles()
set nojoinspaces        " do not add two spaces after a period
set expandtab           " ensure consistency between editors
set tabstop=4           " eight is too much, keep it short
set shiftwidth=4        " eight is too much, keep it short
set textwidth=80        " short lines too
set history=10000       " never forget
set autoindent          " make things pretty
set modelines=1         " no longer the default?
set visualbell          " don't disturb the neighbors
let g:is_bash=1         " even old-timey bourne looks awful without `is_bash`
syntax on               " colorize source

" TODO Learn how to set settings by file type.

" <!--+
"     | pretty xml comments
"     +-->
au BufEnter *.xml,*.xslt,*.xsl set comments=s4:<!--,mb:=-,mb:\|,ex:-->
au BufLeave *.xml,*.xslt,*.xsl set comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
au BufRead,BufNewFile *.coffee set comments=:#
au BufRead,BufNewFile *.js,*.bash set sw=4 ts=4
au BufRead,BufNewFile *.tf,*.rb,*.yaml,*yml,*.cr set sw=2 ts=2
au BufRead,BufNewFile *._coffee,*.coffee set comments=:# ft=coffee
au BufRead,BufNewFile *._js set comments=:# ft=javascript
au BufEnter rules set noet
au BufEnter,BufNewFile *.go,Makefile set noet
au BufEnter COMMIT_EDITMSG set tw=72

" Do you remember the time you spent with Jamfiles?
au BufEnter Jamfile.v2,Jamfile,*.jam set tw=0 et

au BufEnter *.md set ft=markdown

" edit a file in the same directory as the file in the buffer
if has("unix")
    map ,e :edit <C-R>=expand("%:p:h") . "/" <CR>
    map ,s :split <C-R>=expand("%:p:h") . "/" <CR>
else
    map ,e :edit <C-R>=expand("%:p:h") . "\\" <CR>
    map ,s :split <C-R>=expand("%:p:h") . "\\" <CR>
endif

set modeline

command Ls !ls -all %
" http://stackoverflow.com/questions/2393671/vim-restores-cursor-position-exclude-special-files
autocmd BufReadPost *
   \ if line("'\"") > 0 && line("'\"") <= line("$") |
   \   exe "normal! g`\"" |
   \ endif

au BufRead,BufNewFile jquery.ui.*.js set ts=8 tw=0 noet nowrap
au BufRead,BufNewFile *.markdown,*.md set com=

" newer stuff
call plug#begin('~/.vim/plugged')

Plug 'junegunn/seoul256.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-markdown'
Plug 'tommcdo/vim-lion'
Plug 'sainnhe/vim-color-lost-shrine'
Plug 'reedes/vim-pencil'
Plug 'prurigro/vim-markdown-concealed'
Plug 'endel/vim-github-colorscheme'
Plug 'hashivim/vim-terraform'
"Plug 'dpc/vim-smarttabs'
Plug 'lifepillar/pgsql.vim'

call plug#end()

" Unified color scheme (default: dark)
" colo seoul256

" Light color scheme
" colo seoul256-light

" Switch
"set background=dark
"set background=light

function! s:goyo_enter()
    silent !tmux set status off
    silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
    colo seoul256-light
"    Limelight
endfunction

function! s:goyo_leave()
    silent !tmux set status on
    silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
    Limelight!
    colo default
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

filetype plugin indent off

" Wrap only comments, not code.
au BufEnter,BufNewFile *.py,*.html,*.js set formatoptions-=t
au BufLeave *.py,*.html,*.js set formatoptions+=t

" Sets the wrap for comments based on the indent. If the indent is small the
" comments wrap at the same left margin. If it is large we allow the comments to
" have a minimum width.
fun! PrettyRobotsCommentate ()
    if &textwidth != 0
        let currentLine = getline('.')
        let spaces = strlen(matchstr(getline('.'), '^ \+'))
        if spaces > 12
            let textwidth = 80 - 12 + spaces
        else
            let textwidth = 80
        end
        let &textwidth = textwidth
    end
endf

autocmd  CursorMoved  *.py,*.html,*.js   :call PrettyRobotsCommentate()

" Without this C99 compound literals do not highlight correctly.
let c_no_curly_error=1
