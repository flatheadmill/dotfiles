#!/usr/bin/env zsh

# Parses somewhat like gnu getopt but without the completion of arguments,
# with the potential to the `--no-` toggle, but I haven't gotten around to it.
#
# Does implement counting, so `-vvv` can be three times as verbose, and toggling
# instead of flags so `-qq` can be quiet and then not-quiet, although I've never
# encountered that in the wild.

# Used require gnu-getopt, which would have been an annoyance on OS X. Since
# we've gone with `zsh` to make OS X happy, we can go further and remove this
# core `dotctl` component that would conflict with the OS X installed BSD
# `getopt`.

# Note that getopt requires you to eval to set the argument array so we decided
# to go nuts and generate a script that will set local variables or emit error
# messages if the argument parse fails.

# NB: We prepend `o_` because it looks reasonable and it can be annoying to have
# an array named `user` that is full of users where `user` is a better name for
# an iterator variable, and we don't want to add `users=u,user:@`, or do we?

# https://stackoverflow.com/a/4025065
dotctl_vercomp() {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=(${=1}) ver2=(${=2})
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=1; i<=${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

function dotctl:cidr {
    eval "$(dotctl_parse_arguments cidr "h,help" -- "$@")"
    [[ $# -eq 0 ]] && acrectl_usage gce_key

    inet_aton() {
        declare -a parts=( "${(Oa@s/./)1}" )
        local num=0 e=0 
        for quad in "${parts[@]}"; do
            num=$(( num + ( quad * ( 256 ** e ) ) ))
            let e++
        done
        print -R $num
    }

    inet_ntoa() {
        declare -a parts
        num=${1:-}
        for e in 3 2 1; do
            parts+=( $(( num / 256 ** e )) )
            num=$(( num % 256 ** e ))
        done
        parts+=( $num )
        print -R ${(j:.:)parts}
    }

    dotctl_next_command cidr_ "$@"
}

function dotctl:cidr:divvy {
    eval "$(dotctl_parse_arguments cidr_divvy -- "$@")"
    local cidr=${1:-} address bits
    shift

    # https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html
    address=${cidr%/*}
    bits=${cidr#*/}

    blocks=${1:-}
    shift

    let start=$(inet_aton $address)
    let stop=$(inet_aton $(dotctl_command_cidr_inc $cidr $blocks))

    let parent=$(( stop - start ))

    declare -a counts
    while (( $# != 0 )); do
        counts+=($(( parent / ( 1 << (32 - $1) ) )))
        parent=$(( 1 << (32 - $1) ))
        shift
    done

    counts+=($parent)

    print $cidr $(inet_ntoa $stop)/$bits "${counts[@]}"
}

function dotctl:cidr:inc {
    eval "$(args -- "$@")"
    local cidr=${1:-} address bits
    shift
    bits=${cidr#*/}
    address=${cidr%/*}
    local count=${1:-1}
    local int=$(inet_aton $address)
    while (( count != 0 )); do
        int=$(( int + (1 << (32 - bits)) ))
        let count--
    done
    print "$(inet_ntoa $int)/$bits"
}

# ___ usage_root ___
# .TH DOTCTL 1 "Flat Head Mill Manuals" "zsh" "Flat Head Mill Manuals"
# .SH NAME
# dotctl \- amaglamated utilities
# .SH SYNOPSIS
# .SY dotctl
# .IR resource
# .RI [ resource\.\.\.\& ]
# .RI command
# .RI [ options ]
# .RI [ arguments ]
# .SY dotctl
# .IR resource
# .RI [ resource\.\.\.\& ]
# .RI command
# .RI [ \-h | \-\-help ]
# .SH DESCRIPTION
# amalgamated utilities. A place to keep the things that I run all the time in
# bits in pieces as whole programs.
# ___
function ignore {
    typeset dir=${ZSH_ARGZERO:A}
    source $dir/../lib/dotctl/parse.zsh
    declare -A dotctl_registers=( install_force 1 install_used_package_manager 1 )

    declare -A ALPHABET
    for name in \
        alfa bravo charlie delta echo foxtrot golf hotel india juliett kilo \
        lima mike november oscar papa quebec romeo sierra tango uniform \
        victor whiskey x-ray yankee zulu
    do
        ALPHABET[$name[1]]=$name
    done

    local os groff=groff

    case "$OSTYPE" in
        linux-gnu )
            # TODO Check that Linux is Ubuntu.
            # TODO See if Debian doesn't Just Work.
            # TODO Support Alpine.
            os=ubuntu
            install_linux_requirements
            ;;
        darwin* )
            # TODO Check for `xcode-select --version` on OS X.
            # TODO Check for `brew` on OS X.
            os=osx
            install_osx_requirements
            ;;
    esac

    dotctl_check_installed groff

    eval "$(dotctl_parse_arguments root "h,help" -- "$@")"
    [[ $# -eq 0 ]] && dotctl_usage root
    dotctl_next_command '' "$@"
}

function dotctl_args_error {
    typeset func=${1:-} reason=${2:-} flag=${3:-}
    case $reason in
        unknown )
            printf 'unknown argument `%s`.\n' $flag 1>&2
            exit 1
            ;;
        required )
            printf '`%s` is a required argument.\n' $flag 1>&2
            exit 1
            ;;
        execute )
            print "here's some help"
            exit
    esac
}

function args {
    parser dotctl_args_error 2 "$@"
    printf '(( $o_help )) && acrectl_usage %s' $funcstack[2]
}

function dotctl_string_resource {
    typeset name=${1:-}
    awk '/^(# )?___ '$name' ___/{flag=1;next}/^(# )?___/{flag=0}flag' "$dotctl_registers[string_resources]" | sed -E 's/^# ?//g'
}

function dotctl_usage {
    typeset usage=${1:-$funcstack[2]} cols="$(tput cols)"
    function {
        (( cols > 120 )) && cols=120
        if [[ $DOTCTL_MAN_FORMATTER = mandoc ]]; then
            mandoc -O width=${cols}  -T utf8 $1
        else
            GROFF_NO_SGR=1 groff -rLL=${cols}n -rLT=${cols}n -Wall -mtty-char -Tutf8 -man -c "$1"
        fi
    } =(
        dotctl_string_resource $usage | sed -e "$(
            printf 's/__VERSION__/dotctl %s/' $DOTCTL_VERSION
        )" -e "$(
            printf 's/__RELEASE_DATE__/%s/' $DOTCTL_RELEASE_DATE
        )"
    ) | less
    exit
}

function dotctl_commands {
    DOTCTL_COMMANDS+=( "${(@f)$(sed -n 's/^function  *\(dotctl:[^:][^ ]*\) *{$/\1/p' $1)}" )
}

function delegate {
    typeset prefix=$funcstack[2]
    (( $# )) || abend 'fatal: %s expects a command argument' ${prefix//:/ }
    typeset delegate=$prefix:$1
    shift
    (( $DOTCTL_COMMANDS[(Ie)$delegate] )) || abend 'fatal: no such command `%s`.' ${delegate//:/ }
    $delegate "$@"
}

function dotctl:hello {
    print 'hello, world'
}

function dotctl {
    typeset possible_shebang=${1:-}
    typeset -A o_block
    typeset -A dotctl_registers=( string_resources "${ZSH_ARGZERO:a}" cwd ${PWD:a})
    typeset DOTCTL_ARGZERO="$ZSH_ARGZERO"

    source ${DOTCTL_ARGZERO:A:h:h}/lib/dotctl/parse.zsh
    source ${DOTCTL_ARGZERO:A:h:h}/lib/dotctl/heredoc.zsh
    source ${DOTCTL_ARGZERO:A:h:h}/lib/dotctl/block.zsh
    source ${DOTCTL_ARGZERO:A:h:h}/lib/dotctl/catch.zsh
    source ${DOTCTL_ARGZERO:A:h:h}/lib/dotctl/splat.zsh

    typeset -A ALPHABET
    for name in \
        alfa bravo charlie delta echo foxtrot golf hotel india juliett kilo \
        lima mike november oscar papa quebec romeo sierra tango uniform \
        victor whiskey x-ray yankee zulu
    do
        ALPHABET[$name[1]]=$name
    done

    # TODO Is the `step` variable still necessary?
    typeset os step
    case "$OSTYPE" in
        linux-gnu )
            os=$(grep '^ID=' /etc/os-release | cut -d= -f2)
            [[ "$os" = pop ]] && os=ubuntu
            step=step-cli
            [[ -z $DOTCTL_MAN_FORMATTER ]] && DOTCTL_MAN_FORMATTER=groff
            ;;
        darwin* )
            os=osx
            step=step
            [[ -z $DOTCTL_MAN_FORMATTER ]] && DOTCTL_MAN_FORMATTER=mandoc
            ;;
    esac

    typeset DOTCTL_COMMANDS=()
    if [[
        ( "$possible_shebang" =~ ^\.  || "$possible_shebang" =~ / ) &&
        -f "$possible_shebang" &&
        "$(head -c 14 $possible_shebang)" = '#!/usr/bin/env' &&
        "$(head -n 1 $possible_shebang)" =~ ^#!/usr/bin/env\ +acrectl(_redux)?\ *$
    ]]; then
        shift
        DOTCTL_ARGZERO="$possible_shebang"
        dotctl_commands "${DOTCTL_ARGZERO:a}"
        dotctl_registers[string_resources]="${DOTCTL_ARGZERO:a}"
        source $DOTCTL_ARGZERO
        dotctl "$@"
    else
        eval "$(args c,command -b h,help -- "$@")"
        (( $# )) || dotctl_usage
        if [[ -v o_command ]]; then
            typeset tmp
            { tmp=$(mktemp -d) && [[ -d "$tmp" ]]; } || exit 1
            {
                printf '%s' "$o_command" > "$tmp/program"
                DOTCTL_ARGZERO="$tmp/program"
                acrectl_extract_commands acrectl_commands "${ACRECTL_ARGZERO:a}"
                acrectl_registers[string_resources]="${ACRECTL_ARGZERO:a}"
                source $ACRECTL_ARGZERO
                acrectl "$@"
            } always {
                rm -rf "$tmp"
            }
        else
            dotctl_commands ${ZSH_ARGZERO:a}
            delegate "$@"
        fi
    fi
}

dotctl "$@"

exit
